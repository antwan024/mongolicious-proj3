{"ast":null,"code":"import _defineProperty from \"/Users/antwan/Documents/School/p3/Solved/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/antwan/Documents/School/p3/Solved/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/antwan/Documents/School/p3/Solved/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/antwan/Documents/School/p3/Solved/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/antwan/Documents/School/p3/Solved/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/antwan/Documents/School/p3/Solved/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/antwan/Documents/School/p3/Solved/client/src/pages/Achievements.js\";\nimport React, { Component } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\n\nvar Achievement =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Achievement, _Component);\n\n  function Achievement() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Achievement);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Achievement)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      achivements: [],\n      type: \"\",\n      achivementPoints: 0,\n      summary: \"\",\n      date: \"\",\n      earned: \"\"\n    };\n\n    _this.loadAchievements = function () {\n      API.getAchievements().then(function (res) {\n        return _this.setState({\n          achievements: res.data,\n          type: \"\",\n          achievementPoints: 0,\n          summary: \"\",\n          date: \"\",\n          earned: \"\"\n        });\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    };\n\n    _this.deleteAchievement = function (id) {\n      API.deleteAchievement(id).then(function (res) {\n        return _this.loadAchievements();\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    };\n\n    _this.handleInputChange = function (event) {\n      var _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n\n      _this.setState(_defineProperty({}, name, value));\n    };\n\n    return _this;\n  }\n\n  _createClass(Achievement, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadAchievements();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Container, {\n        fluid: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(Col, {\n        size: \"md-6 sm-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(Jumbotron, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"Achievements\")), this.state.achievement.length ? React.createElement(List, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, this.state.achievements.map(function (achievement) {\n        return React.createElement(ListItem, {\n          key: achievmente._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }, React.createElement(Link, {\n          to: \"/achievements/\" + achievement._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }, React.createElement(\"strong\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, \"Need: \", achievement.achivmentPoints, \" \", achievement.type, \"Achievement: \", achivement.summary)), React.createElement(DeleteBtn, {\n          onClick: function onClick() {\n            return _this2.deleteAchievement(achievement._id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }));\n      })) : React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \"No Results to Display\"))));\n    }\n  }]);\n\n  return Achievement;\n}(Component);\n\nexport default Achievement;","map":{"version":3,"sources":["/Users/antwan/Documents/School/p3/Solved/client/src/pages/Achievements.js"],"names":["React","Component","DeleteBtn","Jumbotron","API","Link","Col","Row","Container","List","ListItem","Achievement","state","achivements","type","achivementPoints","summary","date","earned","loadAchievements","getAchievements","then","res","setState","achievements","data","achievementPoints","catch","err","console","log","deleteAchievement","id","handleInputChange","event","target","name","value","achievement","length","map","achievmente","_id","achivmentPoints","achivement"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\n\nclass Achievement extends Component {\n  state = {\n    achivements: [],\n    type: \"\",\n    achivementPoints: 0,\n    summary: \"\",\n    date: \"\",\n    earned: \"\"\n  };\n\n  componentDidMount() {\n    this.loadAchievements();\n  }\n\n  loadAchievements = () => {\n    API.getAchievements()\n      .then(res =>\n        this.setState({ achievements: res.data, type: \"\", achievementPoints: 0, summary: \"\", date: \"\", earned: \"\" })\n      )\n      .catch(err => console.log(err));\n  };\n\n  deleteAchievement = id => {\n    API.deleteAchievement(id)\n      .then(res => this.loadAchievements())\n      .catch(err => console.log(err));\n  };\n\n  handleInputChange = event => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  \n\n  render() {\n    return (\n      <Container fluid>\n        <Row>\n          <Col size=\"md-6 sm-12\">\n            <Jumbotron>\n              <h1>Achievements</h1>\n            </Jumbotron>\n            {this.state.achievement.length ? (\n              <List>\n                {this.state.achievements.map(achievement => (\n                  <ListItem key={achievmente._id}>\n                    <Link to={\"/achievements/\" + achievement._id}>\n                      <strong>\n                        Need: {achievement.achivmentPoints} {achievement.type}\n                        Achievement: {achivement.summary}\n                      </strong>\n                    </Link>\n                    <DeleteBtn onClick={() => this.deleteAchievement(achievement._id)} />\n                  </ListItem>\n                ))}\n              </List>\n            ) : (\n              <h3>No Results to Display</h3>\n            )}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Achievement;\n"]},"metadata":{},"sourceType":"module"}